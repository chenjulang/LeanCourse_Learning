import LeanCourse.Common
open BigOperators Finset Function Real
noncomputable section
set_option linter.unusedVariables false
local macro_rules | `($x ^ $y) => `(HPow.hPow $x $y)
variable {n : ‚Ñï}


/- # Today: Structures and Classes

We cover chapter 6 from Mathematics in Lean. -/

/-
Last time we discussed natural numbers, induction, and casts.
-/

/- Warning: sometimes you have to use `clear` to get rid of hypotheses when doing induction. -/
example (hn : 2 ‚à£ n) :
    (‚àë i in range (n + 1), i : ‚Ñö) = n * (n + 1) / 2 := by
  clear hn
  induction n with
  | zero => simp
  | succ n ih =>
    rw [sum_range_succ, ih]
    push_cast
    ring



/- New homework assignment will be posted this afternoon. -/

/-
# Structures and classes

Learning about structures is the next step towards doing sophisticated mathematics.

Structures are used to build data and properties together.
For example in the structure below `Point` bundles three coordinates together.
-/

@[ext] structure Point where
  x : ‚Ñù
  y : ‚Ñù
  z : ‚Ñù

#check Point




section

/- Given a point, we get access to its coordinates / projections. -/
variable (a : Point)
#check (Point)
#check a.x
#check a.y
#check a.z
#check Point.x a

example : a.x = Point.x a := rfl

end





/- We can prove that two points are equal using the `ext` tactic. -/

example (a b : Point) (hx : a.x = b.x) (hy : a.y = b.y) (hz : a.z = b.z) :
    a = b := by
  ext
  all_goals assumption

example (a b : Point) (hx : a.x = b.x) (hy : a.y = b.y) (hz : a.z = b.z) :
  a = b := by ext <;> assumption

#check Point.ext
#check Point.ext_iff

/- There are multiple ways to define a point (or more generally an instance of a structure).

Tip: if you write `_` for a Point, a lightbulb üí° will appear.
Clicking it will give you the skeleton -/

def myPoint1 : Point where
  x := 1
  y := 2
  z := 3

def myPoint2 :=
  { x := 1, y := 2, z := 3 : Point }

def myPoint3 : Point :=
 id {
   x := 1
   y := 2
   z := 3
 }

def myPoint4 : Point := ‚ü®1, 2, 3‚ü©

def myPoint5 := Point.mk 1 2 3



namespace Point

/- We can define operations on points, like addition. -/

def add (a b : Point) : Point where
  x := a.x + b.x
  y := a.y + b.y
  z := a.z + b.z

def add' : Point ‚Üí Point ‚Üí Point :=
fun ‚ü®ux, uy, uz‚ü© ‚ü®vx, vy, vz‚ü© ‚Ü¶ ‚ü®ux + vx, uy + vy, uz + vz‚ü©

def add'' : Point ‚Üí Point ‚Üí Point
  | ‚ü®ux, uy, uz‚ü©, ‚ü®vx, vy, vz‚ü© => ‚ü®ux + vx, uy + vy, uz + vz‚ü©

/- We define these operations in `namespace Point`. This means that if this namespace is open
we can write `add p q`, but if the namespace isn't open, we have to write `Point.add p q`.
In either case, we can use the *projection notation*, `p.add q` where `p q : Point`.
Lean knows that we mean the function `Point.add`, since the type of `p` is `Point`. -/

#check add myPoint1 myPoint2
#check myPoint1.add myPoint2

end Point

#check Point.add myPoint1 myPoint2
#check myPoint1.add myPoint2

#check Add
open Point

structure Something where
  add : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï

open Something

-- Lean can figure out overloaded names.
#check add myPoint1 myPoint2
#check fun x : Something ‚Ü¶ add x (1 : ‚Ñï) 2
-- #check add (3 : ‚ÑÇ)


namespace Point

/- We can prove properties about points. `protected` in the line below means that
even in the namespace `Point` we still have to write `Point.add_commutative` -/

protected lemma add_comm (a b : Point) :
  add a b = add b a := by simp [add, add_comm]

#check Point.add_comm

/- We can also state that we want to use the `+` notation here.
In that case, we have to write lemmas stating how `+` computes. -/

instance : Add Point := ‚ü®add‚ü©

@[simp] lemma add_x (a b : Point) : (a + b).x = a.x + b.x := by rfl
@[simp] lemma add_y (a b : Point) : (a + b).y = a.y + b.y := by rfl
@[simp] lemma add_z (a b : Point) : (a + b).z = a.z + b.z := by rfl

example (a b : Point) : a + b = b + a := by ext <;> simp [add_comm]

end Point





/- We can bundle properties in structures -/

structure PosPoint where
  x : ‚Ñù
  y : ‚Ñù
  z : ‚Ñù
  x_pos : 0 < x
  y_pos : 0 < y
  z_pos : 0 < z

-- ÂÆö‰πâ‰πüË¶ÅËØÅÊòéÔºåÂõ†‰∏∫ÈúÄË¶ÅÂêàÁêÜÁöÑÂÆö‰πâÔºåÊâçËÉΩÁ¨¶ÂêàPosPointÁöÑStructureÁöÑ6Êù°Ë¶ÅÊ±Ç
def PointPoint.add (a b : PosPoint) : PosPoint :=
{ x := a.x + b.x
  y := a.y + b.y
  z := a.z + b.z
  x_pos := by apply add_pos; exact a.x_pos; exact b.x_pos
  y_pos := by linarith [a.y_pos, b.y_pos]
  z_pos := by linarith [a.z_pos, b.z_pos] }

/- Going from `Point` to `PosPoint` has code duplication.
We don't want this when defining monoids, groups, rings, fields. -/

structure PosPoint' extends Point where
  x_pos : 0 < x
  y_pos : 0 < y
  z_pos : 0 < z

#check PosPoint'.toPoint

def PointPoint'.add (a b : PosPoint') : PosPoint' :=
{ a.toPoint + b.toPoint with
  x_pos := by dsimp; linarith [a.x_pos, b.x_pos]
  y_pos := by dsimp; linarith [a.y_pos, b.y_pos]
  z_pos := by dsimp; linarith [a.z_pos, b.z_pos] }

/- We could also define a type like this using a subtype. It's notation is very similar to sets,
but written as `{x : Œ± // p x}` instead of `{x : Œ± | p x}`. -/

def PosReal : Type :=
  { x : ‚Ñù // x > 0 }

def set_of_positive_reals : Set ‚Ñù :=
  { x : ‚Ñù | x > 0 }

/- However, that doesn't give you nice projections names (automatically).
And it gets ugly when you have more than 2 projections. -/

example (x : PosReal) : x.1 > 0 := x.2 -- ËøôÈáåÁöÑPosRealÊåáÁöÑÊòØÊúÄËøëÁöÑPosReal

def PosPoint'' : Type :=
  { x : ‚Ñù √ó (‚Ñù √ó ‚Ñù) // x.1 > 0 ‚àß x.2.1 > 0 ‚àß x.2.2 > 0 }





/- Structures can have parameters -/

@[ext] structure Triple (Œ± : Type*) where
  x : Œ±
  y : Œ±
  z : Œ±

#check Triple.mk 1 2 3

#check Triple.mk cos sin tan




/- # A note on universes

Lean has a hierarchy of universes. -/

#check ‚Ñù
#check Type 0 -- Âíå Type ‰∏ÄÊ†∑
#check Type 1
#check Type 2

/- You can also work in a variable universe. -/

universe u v
#check Type u
#check Type (v + 3)
#check Type (max u v)
#check fun (Œ± : Type u) (Œ≤ : Type v) ‚Ü¶ Œ± ‚Üí Œ≤ --Ôºü
-- #check Type (u + v) -- the operations on universes are very limited.

/-
* `Type*` means `Type u` for some new variable `u`
* `Type _` means an arbitary universe -/

#check Type*
#check Type _


example : Type (u + 3) = Type _ := rfl
-- example : Type (u + 3) = Type* := rfl -- error

/-
* `Prop` is a bottom universe below `Type`.
* `Sort` is used to write "`Prop` or `Type`" -/

#check Prop

example : Sort 0 = Prop := by rfl
example : Sort 1 = Type := by rfl -- TypeÁöÑÂà´Áß∞ÊòØ(Type 0)
example : Sort 2 = Type 1 := rfl
example : Sort (u + 1) = Type u := rfl
example : Sort _ = Type u := rfl
-- example : Sort* = Type u := rfl -- error



/- # Equiv

An important structure is equivalences between two types,
i.e. a bijection (with a chosen inverse).
This exists in the library as `Equiv Œ± Œ≤` or `Œ± ‚âÉ Œ≤`.  -/

#check Equiv

example {Œ± Œ≤ : Type*} (e : Œ± ‚âÉ Œ≤) (x : Œ±)
: Œ≤
:= e.toFun x
example {Œ± Œ≤ : Type*} (e : Œ± ‚âÉ Œ≤) (x : Œ±)
: Œ≤
:= e x

example {Œ± Œ≤ : Type*} (e : Œ± ‚âÉ Œ≤)
: Œ≤ ‚âÉ Œ±
:= e.symm
example {Œ± Œ≤ : Type*} (e : Œ± ‚âÉ Œ≤) (y : Œ≤)
: Œ±
:= e.symm.toFun y





/- # Abelian groups
Let's define abelians group in Lean. -/

structure AbelianGroup where -- Â§™Áæé‰∫Ü
  G : Type*
  add (x : G) (y : G) : G
  comm (x y : G) : add x y = add y x
  assoc (x y z : G) : add (add x y) z = add x (add y z)
  zero : G
  add_zero : ‚àÄ x : G, add x zero = x
  neg : G ‚Üí G
  add_neg : ‚àÄ x : G, add x (neg x) = zero

def IntGroup : AbelianGroup where
  G := ‚Ñ§
  add := fun a b ‚Ü¶ a + b
  comm := add_comm
  assoc := add_assoc
  zero := 0
  add_zero := by simp
  neg := fun a ‚Ü¶ -a
  add_neg := by exact fun x ‚Ü¶ Int.add_right_neg x -- exact?

lemma AbelianGroup.zero_add (g : AbelianGroup) (x : g.G)
--ËøôÈáåÂÆåÂÖ®ÂèØ‰ª•ÊîπÊàêÂÖ∂‰ªñÂêçÂ≠ófoo1ÔºåÂÜôÊàêËøôÊ†∑ÊòØ‰∏∫‰∫ÜÂêéÈù¢Êñπ‰æøË∞ÉÁî®ÔºåÊàñËÄÖÂÖ∂‰ªñÊäΩË±°ÁöÑ‰ΩøÁî®
: g.add g.zero x = x
:= by
  rw [g.comm, g.add_zero]




/-
Issues with this approach:
* we want a notation for `AbelianGroup.add` and `AbelianGroup.neg`.
* we want this to be automatically attached to certain concrete type such as `‚Ñï`, `‚Ñù`...
* we want a way to automatically build new examples from old ones

Using `class` instead of `structure` tells Lean to create a database of "instances of this class".
The `instance` command allows to add entries to this database.
-/

-- class AbelianGroup' (G : Type*) where -- ÂØπÊØîstructureÂèëÁé∞GÁöÑÂÜôÁöÑ‰ΩçÁΩÆ‰∏çÂêå‰∫ÜÔºåÂÜôÂú®‰∫ÜÁ¨¨‰∏ÄË°å
--   add (x : G) (y : G) : G
--   comm (x y : G) : add x y = add y x
--   assoc (x y z : G) : add (add x y) z = add x (add y z)
--   zero : G
--   add_zero : ‚àÄ x : G, add x zero = x
--   neg : G ‚Üí G
--   add_neg : ‚àÄ x : G, add x (neg x) = zero

-- ËøôÈáåÊàëÊïÖÊÑèÂ∞ÜGÊîπÊàêHÔºåËØ¥ÊòéaddÁöÑÁ¨¨‰∏Ä‰∏™ÂèÇÊï∞xÔºöH‰∏≠ÁöÑHÂÖ∂ÂÆûÂè™ÊòØ‰∏Ä‰∏™ÂΩ¢ÂèÇÔºåÂèØ‰ª•ÊòØ‰ªªÊÑèÁöÑÁ±ªÂûã
class AbelianGroup' (H : Type*) where
  add (x : H) (y : H) : H
  comm (x y : H) : add x y = add y x
  assoc (x y z : H) : add (add x y) z = add x (add y z)
  zero : H
  add_zero : ‚àÄ x : H, add x zero = x
  neg : H ‚Üí H
  add_neg : ‚àÄ x : H, add x (neg x) = zero

instance : AbelianGroup' ‚Ñ§ where
  add := fun a b ‚Ü¶ a + b
  comm := add_comm
  assoc := add_assoc
  zero := 0
  add_zero := by simp
  neg := fun a ‚Ü¶ -a
  add_neg := by exact fun x ‚Ü¶ Int.add_right_neg x

#eval AbelianGroup'.add (2 : ‚Ñ§) 5 -- ÁÑ∂ÂêéËøôÈáåÂ∞±ÂºÄÂßãÊâæinstanceÔºåÊâæÂà∞‰∫Ü‰∏äÈù¢Ëøô‰∏™instance : AbelianGroup' ‚Ñ§

infixl:70 " +' " => AbelianGroup'.add -- infixlÊåáÁöÑÊòØÂú®‰∏§‰∏™ÂØπË±°AÔºåB‰∏≠Èó¥ÁöÑËøêÁÆóÁ¨¶ÔºåÂÆûÈôÖÊïàÊûúÁõ∏ÂΩì‰∫éAbelianGroup'.add A B

#eval (-2) +' 5

notation " ùüò " => AbelianGroup'.zero

prefix:max "-'" => AbelianGroup'.neg

/- When you assume you have an object in a certain class, you put them in square brackets
(and giving a name to them is optional).
Such arguments are called instance-implicit arguments,
Lean will provide them automatically by searching the corresponding database.
-/

#check AbelianGroup'.add

instance AbelianGroup'.prod (G G' : Type*) [AbelianGroup' G] [AbelianGroup' G']
:AbelianGroup' (G √ó G') where
  add := fun a b ‚Ü¶ (a.1 +' b.1, a.2 +' b.2)
  comm := sorry
  assoc := sorry
  zero := (ùüò, ùüò)
  add_zero := sorry
  neg := fun a ‚Ü¶ (-' a.1, -' a.2)
  add_neg := sorry

set_option trace.Meta.synthInstance true in -- leanÁöÑÊÄùËÄÉËøáÁ®ãÈÉΩÂèØ‰ª•ÁúãÂá∫Êù•ÔºåËøôÂ∞±ÊòØÂÖÉÁºñÁ®ãÔºåÊúâÂá†‰πéÊúÄÈ´òÁöÑÁºñÁ®ãÊùÉÈôê
#eval ((2, 3) : ‚Ñ§ √ó ‚Ñ§) +' (4, 5)

#check (3 : ‚Ñù) * 5




/- In mathlib, there are two notions of abelian groups,
one written using `(*,1,‚Åª¬π)` and one using `(+, 0, -)`. -/

#check CommGroup
#check AddCommGroup


/- To explain this distinction, consider monoids (groups without inverses).
`(‚Ñù, +, 0)` and `(‚Ñù, *, 1)` are both monoids, and we want to have a distinction in notation and
lemma names of these two structures. -/

example : Monoid ‚Ñù := by infer_instance
example : AddMonoid ‚Ñù := by infer_instance
example (x : ‚Ñù) : x + 0 = x := add_zero x
example (x : ‚Ñù) : x * 1 = x := mul_one x

#check Monoid
#check AddMonoid









/- ## Exercises -/

/- 1. Define the structure of "strict bipointed types", i.e. a type together with 2 unequal points
`x‚ÇÄ ‚â† x‚ÇÅ` in it.
Then state and prove the lemma that for any object in this class we have `‚àÄ z, z ‚â† x‚ÇÄ ‚à® z ‚â† x‚ÇÅ.` -/



/- 2. Define scalar multiplication of a real number and a `Point`.
Also define scalar multiplication of a positive real number and a `PosPoint`. -/



/- 3. Define Pythagorean triples, i.e. triples `a b c : ‚Ñï` with `a^2 + b^2 = c^2`.
Give an example of a Pythagorean triple, and show that multiplying a Pythagorean triple by a
constant gives another Pythagorean triple. -/



/- 4. Prove that triples of equivalent types are equivalent. -/

example (Œ± Œ≤ : Type*) (e : Œ± ‚âÉ Œ≤) : Triple Œ± ‚âÉ Triple Œ≤ := sorry


/- 5. Show that if `G` is an abelian group then triples from elements of `G` is an abelian group. -/

example (G : Type*) [AbelianGroup' G] : AbelianGroup' (Triple G) := sorry














/- ## Coercions

You can specify *coercions* to say that an element of one type can be silently coerced to an element
of another type. We've already seen the coercions
`‚Ñï ‚Üí ‚Ñ§ ‚Üí ‚Ñö ‚Üí ‚Ñù ‚Üí ‚ÑÇ`
for numbers.
-/

recall PosReal := {x : ‚Ñù // x > 0}

instance : Coe PosReal Real := ‚ü®fun x ‚Ü¶ x.1‚ü©
--?ÊÄª‰πãÁº∫‰∫ÜËøô‰∏ÄË°å‰∏ãÈù¢#check fun (x : PosReal) ‚Ü¶ (x : ‚ÑÇ)‰ºöÂº∫Âà∂ËΩ¨Êç¢Êä•Èîô
-- instance : Coe PosReal Real where
--   coe := fun
--     | .mk val property => {
--       cauchy := by
--         done
--     }

def diff (x y : PosReal) : ‚Ñù := x - y

#check fun (x : PosReal) ‚Ü¶ (x : ‚ÑÇ)




/-
* We use `CoeSort` to coerce to `Type _` (or `Sort _`)
* We use `CoeFun` to coerce to functions.
-/
structure PointedType where
  carrier : Type*
  pt : carrier

instance : CoeSort PointedType Type* := ‚ü®fun Œ± ‚Ü¶ Œ±.carrier‚ü©

structure PointedFunction (X Y : PointedType) where
  toFun : X ‚Üí Y
  toFun_pt : toFun X.pt = Y.pt

infix:50 " ‚Üí. " => PointedFunction

instance {X Y : PointedType} --?
: CoeFun (X ‚Üí. Y) (fun _ ‚Ü¶ X ‚Üí Y)
:= ‚ü®fun e ‚Ü¶ e.toFun‚ü©

-- these two are hints to the pretty printer to print these operations a bit nicer.
attribute [pp_dot] PointedType.pt
attribute [coe] PointedFunction.toFun

namespace PointedFunction

variable {X Y Z : PointedType}

@[simp] lemma coe_pt (f : X ‚Üí. Y)
: f X.pt = Y.pt
:= f.toFun_pt

lemma comp (g : Y ‚Üí. Z) (f : X ‚Üí. Y)
: X ‚Üí. Z
:=
{ toFun := g ‚àò f
  toFun_pt := by sorry }

end PointedFunction
