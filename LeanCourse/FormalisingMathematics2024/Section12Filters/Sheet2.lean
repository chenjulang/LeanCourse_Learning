/-
Copyright (c) 2023 Kevin Buzzard. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author : Kevin Buzzard
-/
import Mathlib.Tactic
-- imports all the Lean tactics
import Mathlib.Order.Filter.Basic

/-!

# The order (≤) on filters

We think of filters as generalised subsets, and just as subsets are partially ordered
by `⊆`, filters are partially ordered too, by `≤`. Recall that a subset `X : set α`
of `α` gives rise to a principal filter `𝓟 X : filter α`, and we definitely
want `X ⊆ Y ↔ 𝓟 X ≤ 𝓟 Y` so let's think about how this should work. If `F` and `G`
are filters, then `F ≤ G` should mean "the generalised subset `F` is contained
in the generalised subset `G`", so it should mean "if a normal subset of α contains
`G` then it contains `F`", so it should mean `G.sets ⊆ F.sets`, which is in fact
the definition. Note that the smaller the filter `F`, the bigger the collection
`F.sets`, because `F` is contained in more sets!

In the `Filter` namespace there's a lemma


Let's formalise this. Show that 𝓟 S ≤ 𝓟 T ↔ S ⊆ T.
Note that this is called `principal_mono` in mathlib but
there's no harm in proving it yourself.

Some helpful lemmas (all in the `Filter` namespace):

`mem_principal : T ∈ 𝓟 S ↔ S ⊆ T`
`mem_principal_self S : S ∈ 𝓟 S`
`le_def : F ≤ G ↔ ∀ (S : Set α), S ∈ G → S ∈ F`

-/

namespace Section12sheet2

variable {α : Type}

open Filter Set
-- so we don't keep having to type `Filter.le_def` and `Set.Subset.trans` etc

open scoped Filter
-- for 𝓟 notation

example (S T : Set α) : 𝓟 S ≤ 𝓟 T ↔ S ⊆ T := sorry

-- Here's another useful lemma about principal filters.
-- It's called `le_principal_iff` in mathlib but why
-- not try proving it yourself?
example (F : Filter α) (S : Set α) : F ≤ 𝓟 S ↔ S ∈ F := sorry

/-

## Filters are a complete lattice

First I claim that if Fᵢ are a bunch of filters, indexed by `i : I`, then
the intersection of `Fᵢ.sets` is also a filter. Let's check this.

-/
def lub {I : Type} (F : I → Filter α) : Filter α where
  sets := {X | ∀ i, X ∈ F i}
  univ_sets := sorry
  sets_of_superset := sorry
  inter_sets := sorry

/-

Now let's check that this is a least upper bound for the Fᵢ! We check the
two axioms.

-/
-- it's an upper bound
example (I : Type) (F : I → Filter α) (i : I) : F i ≤ lub F := sorry

-- it's ≤ all other upper bounds
example (I : Type) (F : I → Filter α) (G : Filter α) (hG : ∀ i, F i ≤ G) :
    lub F ≤ G := sorry

/-

Just like it's possible to talk about the topological space generated
by a collection of subsets of `α` -- this is the smallest topology
for which the given subsets are all open -- it's also possible to talk
about the filter generated by a collection of subsets of `α`. One
can define it as the intersection of all the filters that contain your
given collection of subsets (we just proved above that this is a filter).
This gives us a definition of greatest lower bound for filters too.

-/
-- greatest lower bound of filters Fᵢ is the least upper bound of the filters G whose `sets`
-- contain all of the `Fᵢ.sets`
def glb {I : Type} (F : I → Filter α) : Filter α :=
  lub fun G : {G : Filter α | ∀ i, (F i).sets ⊆ G.sets} ↦ G.1

-- it's a lower bound
example (I : Type) (F : I → Filter α) (i : I) : glb F ≤ F i := sorry

-- it's ≥ all other lower bounds
example (I : Type) (F : I → Filter α) (G : Filter α) (hG : ∀ i, G ≤ F i) :
    G ≤ glb F := sorry

end Section12sheet2
